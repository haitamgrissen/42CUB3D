        if(c == 'S')
            line[1] == 'O' ? get_path(++line, 'O') : get_path(line, 'S');
        else
            get_path(++line, c);






            "Error\n"






here is the proof





/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   File_Parser.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hgrissen <hgrissen@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/12/29 14:19:42 by hgrissen          #+#    #+#             */
/*   Updated: 2021/01/01 15:51:56 by hgrissen         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void spc_fil();
void map_fil();
char **g_prm.map;
int gcount;
int main()
{   
    
    //printf("%d\n", gcount);
    //prm_init();
    //err_init();
    get_file();
    nwl_cnt();
    build_map();
    spc_fil();
    map_fil();
    //printf("%d", lng_lin());
    //print_struct_elemts();
    //Ch_fil_err();
    return 0;
}

void   get_file()
{
    int     fd;
    char*   line;
    char    nwl = '\n';
    char    eof =  '\0';

    fd = open("map.cub", O_RDONLY);
    while(get_next_line(fd, &line))
    {
        if (!g_prm.str)
            g_prm.str = line;
        else
            g_prm.str = ft_strjoin(g_prm.str , line);
        g_prm.str = ft_strjoin(g_prm.str, &nwl);
        g_prm.str = ft_strjoin(g_prm.str, &eof);
        //treat_file(line);
    }
    g_prm.str = ft_strjoin(g_prm.str , line);
    g_prm.str = ft_strjoin(g_prm.str,&nwl);
    g_prm.str = ft_strjoin(g_prm.str, &eof);
    //treat_file(line);
}

void    treat_file(char*    line)
{
    char c;

    c = line[0];
    if (c == 'R')
        get_res(line);
    else if (c == 'F' || c == 'C')
    {
        c == 'F' ? get_rgb(line, 'F') : get_rgb(line, 'C');
        g_prm.inc++;
    }
    else if (c == 'W'|| c == 'E' || c == 'N' || c == 'S')
        routing(line);
    else if (!line[0] && g_err.map_bgn)
        g_err.inv_nwl = 1;
    else
        get_map(line);
}



void nwl_cnt()
{
    int i   = 0;
    int cnt = 0;
    while(g_prm.str[i])
    {
        //printf("%d\n", i);
        if(g_prm.str[i] == '\n')
            cnt++;
        i++;
    }
    gcount = cnt;
}

int lng_lin()
{
    int i   = 0;
    int j = 0;
    int tmp = 0;
    int haha[gcount];

    while(g_prm.str[i])
    {
        tmp++;
        if(g_prm.str[i] == '\n')
        {
            haha[j] = tmp -1;
            tmp = 0;
            j++;
        }   
        i++;
    }
    tmp = 0;
    j--;
    while(j >= 0)
    {
        if (tmp < haha[j])
            tmp = haha[j];
        j--;
    }
    return(tmp);
}

void build_map()
{
    int  i = 0;
    //printf("%d" , nwl_cnt());
    g_prm.map = malloc(sizeof(char *) * (gcount + 2));
    while(i <= gcount + 1)
    {
        g_prm.map[i] = malloc(sizeof(char) * (lng_lin() + 2));
        //g_prm.map[i] = "h\0";
        i++;
    }
}

void spc_fil()
{
    int i = 0;
    int j = 0;
    while(i <= gcount + 1)
    {
        j = 0;
        while(j <= lng_lin() + 1)
        {
            g_prm.map[i][j] = ' ';
            j++;
        }
        g_prm.map[i][j] = '\0';
        i++;
    }
}

void map_fil()
{
    int i = 1;
    int j = 1;
    int k = 0;
    int chk = 0;
    while(i <= gcount)
    {
        j = 1;
        //k = 0;
        chk = 0;
        while(j <= lng_lin())
        {
            if (g_prm.str[k] == '\n')
            {
                k++;
                chk = 1;
            }
            else
            {
                if(!chk)
                {
                    g_prm.map[i][j++] = g_prm.str[k];
                    k++;
                }
                else
                    g_prm.map[i][j++] = ' ';
                }
        }
        i++;
    }

    i = 0;
    while(i <= gcount + 1)
    {
        //printf("%s", g_prm.map[i]);
        i++;
    }
    printf("%s", g_prm.str);
}




R    1500 1000
WE  ./sma9lo/file
NO  ./taha   
EA  ./lmeki 
SO  ./saleh  
S   ./etazi
F   10,10,20
C   10,10,9

11111111111111111111111111111111111111111111111111111111111
10000000000000000000000000000000000000000000000000000000001
10000000000000000000000000000000000000000000000000000000001
10000000000000000000000000000000000000000000000000000000001
11000000000000000000000001101100110011110110000000011111111
11111111111110000000111111101110011001111110010010010000011
11000000000000000001000000000000001100110000000000000000011
11000000000000001110000110011000011001100000000011111111111
11000111111001001000000010001100000000000000100000000000011
11000100001001001001100110001100011111111100100111111111111
11100100101001111001100110001100011001000000000000000010011
1100N100100000000000000000001100000001101100100000001000111
10000000001111111111111111111111111111111111111111111111111
                       1
                      101
                     10001
                    1000001
                   100000001
                  11111111111
111111111111111111111111111111111111111111111111111111111111111111111
11                                                                 11
11                                                                 11
11   111111111111111   111   111111111111111     111111111111111   11
11   111111111111      111   1111111111111111    111111111111111   11
11   111               111   111           111   1111       1111   11
11   111               111   111            111  111         111   11
11   111111111         111   111            111  111         111   11
11   111111            111   111           111   111         111   11
11   111               111   1111111111111111    111         111   11
11   111               111   1111111111111111    111         111   11
11   111               111   111           111   111         111   11
11   111               111   111            111  111         111   11
11   111               111   111            111  111         111   11
11   111               111   111           111   1111       1111   11
11   111               111   1111111111111111    111111111111111   11
11   111               111   111111111111111     111111111111111   11
11                                                                 11
11                                                                 11
111111111111111111111111111111111111111111111111111111111111111111111